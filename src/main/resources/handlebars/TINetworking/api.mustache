{{#operations}}

import Alamofire
import TINetworking

{{#description}}
/**
 {{description}}
 */
{{/description}}
{{#operation}}
{{#contents}}
{{#parameters}}
{{#isEnum}}
/**
 * enum for parameter {{paramName}}
 */
public enum {{enumName}}_{{operationId}}: {{^isContainer}}{{{dataType}}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} { {{#allowableValues}}{{#enumVars}}
    case {{name}} = {{#isContainer}}"{{/isContainer}}{{#isString}}"{{/isString}}{{{value}}}{{#isString}}"{{/isString}}{{#isContainer}}"{{/isContainer}}{{/enumVars}}{{/allowableValues}}
}

{{/isEnum}}
{{/parameters}}
{{/contents}}
{{/operation}}
public extension EndpointRequest {
{{#operation}}
{{#contents}}
    /**
     {{#summary}}
     {{{summary}}}
     {{/summary}}

     {{#parameters}}
     - parameter {{paramName}}: {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/parameters}}
     */
    static func {{operationId}}({{#parameters}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{#hasMore}}, {{/hasMore}}{{/parameters}}{{#hasParams}}, {{/hasParams}}server: Server? = nil, security: [[String]]? = nil) -> EndpointRequest<{{#parameters}}{{#isBodyParam}}{{{dataType}}}{{/isBodyParam}}{{/parameters}}{{^hasBodyParam}}Nothing{{/hasBodyParam}}, {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Nothing{{/returnType}}> {
        .init(templatePath: "{{{path}}}",
              method: .init(rawValue: "{{httpMethod}}"),
              body: {{#hasBodyParam}}body{{/hasBodyParam}}{{^hasBodyParam}}nil{{/hasBodyParam}},
              {{#if queryParams}}
              queryParameters: [
              {{#each queryParams}}
                  "{{{this.baseName}}}": .init(value: {{{this.paramName}}}, allowEmptyValue: {{#this.required}}false{{/this.required}}{{^this.required}}true{{/this.required}}),
              {{/each}}],
              {{/if}}
              {{#hasPathParams}}
              pathParameters: [
                {{#each pathParams}}
                    "{{{this.baseName}}}": .init(value: {{{this.paramName}}}, allowEmptyValue: {{#this.required}}false{{/this.required}}{{^this.required}}true{{/this.required}}),
                {{/each}}],
              {{/hasPathParams}}
              {{#hasHeaderParams}}
              headerParameters: [
                {{#each headerParams}}
                    "{{{this.baseName}}}": .init(value: {{{this.paramName}}}, allowEmptyValue: {{#this.required}}false{{/this.required}}{{^this.required}}true{{/this.required}}),
                {{/each}}],
              {{/hasHeaderParams}}
              {{^hasHeaderParams}}
              headerParameters: nil,
              {{/hasHeaderParams}}
              {{#hasCookieParams}}
              cookieParameters: [
                {{#each cookieParams}}
                    "{{{this.baseName}}}": .init(value: {{{this.paramName}}}, allowEmptyValue: {{#this.required}}false{{/this.required}}{{^this.required}}true{{/this.required}}),
                {{/each}}],
              {{/hasCookieParams}}
              acceptableStatusCodes: [{{contentExtensions.x-codegen-acceptable-status-codes}}],
              security: security ?? [{{#if authMethods}}[{{/if}}{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}{{#if authMethods}}]{{/if}}], // note: OR requirement is not supported by swagger-codegen
              server: server)
    }
{{/contents}}
{{/operation}}
}
{{/operations}}
